name: Build OSS

on:
  workflow_call:
    inputs:
      platforms:
        required: true
        type: string
      image:
        required: true
        type: string
      go-md5:
        required: true
        type: string
      tag:
        required: false
        type: string

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: read # for docker/build-push-action to read repo content
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      id-token: write # for OIDC login to AWS ECR
      packages: write # for docker/build-push-action to push to GHCR
    outputs:
      version: ${{ steps.meta.outputs.version }}
      image_digest: ${{ steps.build-push.outputs.digest }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.tag != '' && format('refs/tags/v{0}', inputs.tag) || github.ref }}
          fetch-depth: 0

      - name: Fetch Cached Artifacts
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ inputs.go-md5 }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
        with:
          platforms: arm,arm64,ppc64le,s390x
        if: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}

      - name: Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: DockerHub Login
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_PUBLIC_ECR }}
        if: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}

      - name: Login to Public ECR
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: public.ecr.aws
        if: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}

      - name: Login to Quay.io
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
        if: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}

      - name: Get short tag
        id: tag
        run: |
          version="${{ inputs.tag }}"
          short="${version%.*}"
          echo "short=$short" >> $GITHUB_OUTPUT
        if: ${{ inputs.tag != '' }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@dbef88086f6cef02e264edb7dbf63250c17cef6c # v5.5.0
        with:
          context: ${{ inputs.tag != '' && 'git' || 'workflow' }}
          images: |
            name=nginx/nginx-ingress
            name=ghcr.io/nginxinc/kubernetes-ingress
            name=public.ecr.aws/nginx/nginx-ingress
            name=quay.io/nginx/nginx-ingress
          flavor: |
            latest=${{ (inputs.tag != '' && 'true') || 'auto' }}
            suffix=${{ contains(inputs.image, 'ubi') && '-ubi' || '' }}${{ contains(inputs.image, 'alpine') && '-alpine' || '' }},onlatest=true
          tags: |
            type=edge
            type=ref,event=pr
            type=ref,event=branch,enable=${{ startsWith(github.ref, 'refs/heads/release-') }}
            type=schedule,enable=${{ inputs.tag == '' }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ inputs.tag }},enable=${{ inputs.tag != '' }}
            type=raw,value=${{ steps.tag.outputs.short }},enable=${{ inputs.tag != '' }}
          labels: |
            org.opencontainers.image.description=NGINX Ingress Controller for Kubernetes
            org.opencontainers.image.documentation=https://docs.nginx.com/nginx-ingress-controller
            org.opencontainers.image.vendor=NGINX Inc <kubernetes@nginx.com>
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/nginxinc/kubernetes-ingress/main/README.md
            io.artifacthub.package.logo-url=https://docs.nginx.com/nginx-ingress-controller/images/icons/NGINX-Ingress-Controller-product-icon.svg
            io.artifacthub.package.maintainers=[{"name":"NGINX Inc","email":"kubernetes@nginx.com"}]
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.keywords=kubernetes,ingress,nginx,controller

      - name: Build Docker image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        id: build-push
        with:
          file: build/Dockerfile
          context: "."
          cache-from: type=gha,scope=${{ inputs.image }}
          cache-to: type=gha,scope=${{ inputs.image }},mode=max
          target: goreleaser
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') && inputs.platforms || '' }}
          load: ${{ github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/release-') }}
          push: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}
          pull: true
          no-cache: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}
          sbom: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}
          provenance: false
          build-args: |
            BUILD_OS=${{ inputs.image }}
            IC_VERSION=${{ (github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/release-')) && 'CI' || steps.meta.outputs.version }}

      - name: Certify Images
        continue-on-error: true
        run: |
          curl -fsSL https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/1.6.11/preflight-linux-amd64 --output preflight
          chmod +x preflight

          IFS=',' read -ra arch_list <<< "${{ inputs.platforms }}"

          for arch in "${arch_list[@]}"; do
              architecture=("${arch#*/}")
              ./preflight check container quay.io/nginx/nginx-ingress:${{ steps.meta.outputs.version }} --pyxis-api-token ${{ secrets.PYXIS_API_TOKEN }} --certification-project-id ${{ secrets.CERTIFICATION_PROJECT_ID }} --platform $architecture --submit
          done
        if: ${{ github.ref_type == 'tag' && contains(inputs.image, 'ubi') }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@d43c1f16c00cfd3978dde6c07f4bbcf9eb6993ca # 0.16.1
        continue-on-error: true
        with:
          image-ref: nginx/nginx-ingress:${{ steps.meta.outputs.version }}
          format: "sarif"
          output: "trivy-results-${{ inputs.image }}.sarif"
          ignore-unfixed: "true"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@b7bf0a3ed3ecfa44160715d7c442788f65f0f923 # v3.23.2
        continue-on-error: true
        with:
          sarif_file: "trivy-results-${{ inputs.image }}.sarif"

      - name: Upload Scan Results
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        continue-on-error: true
        with:
          name: "trivy-results-${{ inputs.image }}.sarif"
          path: "trivy-results-${{ inputs.image }}.sarif"
        if: always()

  send-notification:
    name: Send Notification
    needs: build
    uses: ./.github/workflows/updates-notification.yml
    with:
      tag: ${{ inputs.tag }}
      version: ${{ needs.build.outputs.version }}
      image_digest: ${{ needs.build.outputs.image_digest }}
    permissions:
      contents: read
      actions: read
    secrets: inherit
    if: ${{ inputs.tag != '' }}
